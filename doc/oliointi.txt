Maucisynthin muuttaminen C:stä C++:ksi

Mitä hyötyä?
+ opit oliosuunnittelua
+ opit C++:n hyötyjä ja ominaisuuksia käytännössä
+ opit käyttämään Eclipseä
+ koodi tulee jäsenneltyä uudelleen

Havaintoja:
* apply_envelope_exp pitää joka tapauksessa jakaa osiin
* synth.c:ssä on jo nyt valtavasti staattisia muuttujia kommentteineen.
  Oskillaattorin ja verhokäyrän irrottaminen omiksi luokikseen selkeyttää
  tiedostojen alkua.

* synth.c:ssä on seuraavat kokonaisuudet:
  a) viestien vastaanottaminen GUIlta
  b) viestien käsittely
  c) oskillaattorit
  d) verhokäyrä
  
* GUI ja syntetisaattorimoduuli tarvitsevat yhteisen viestilistan,
  koska ne ovat eri säikeissä ja tekevät asioita eri aikoihin.
  (ynnä verhokäyrä)
  
* GUIn ja syntetisaattorimoduulin viestit olioiksi tavujen sijaan?
  + ymmärrettävyys (vrt. Javan Exception-oliot)
  - Dataa tulee paljon. Turhaa lisäkuormaa.
  * Siis pidetään nykyinen viestintäprotokolla.
  
* GUIn ja syntikkamoduulin viestipuskuri omaksi oliokseen?
  + selkeät metodit putNoteOn, putNoteOff, putNotesOff, putParameterChange
  - bloattaava rajapinta lukiessa: ensin puskurin metodi lukee viestin,
    sitten välittää sen paluuarvona, ja lopuksi synaluokka tulkitsee sen.
    * synaluokka ja viestipuskuri friend, syna voi lukea suoraan? 


* Verhokäyrä osaksi oskillaattoriluokkaa?
  * Verhokäyrä liittyy nuottien alkamiseen ja loppumiseen.
  * Vaihtoehto: verhokäyrä erillisenä luokkana, jossa ei ole muita
    toimintoja kuin verhokäyrän soveltaminen johonkin signaalinpätkään.    
  + On kiva, jos tulevaisuudessa yhdellä nuotilla voi olla useampi
    oskillaattori (poislukien LFO). Tällöin on vielä kivempi, jos jokaisella
    oskillaattorilla on oma verhokäyränsä.
    

  
    


Ongelmia
* Oskillaattorin renderöinti aaltotaulukolla.
  a) Jos tehdään kustakin perusaaltomuodosta oma metodi, niin
     koodi haisee, koska on monistettua koodia.
  b) Jos yritetään yhdistää kaikkien eri aaltomuotojen syntetisointi
     yhteen, niin seurauksena on if-lauseilla turvotettu, takuulla
     yli 50 rivin pääsilmukka. Dislike. Koodi haisee vielä enemmän.
  

Toteutusratkaisuja
- Oskillaattori luokaksi. Aaltotaulukko staattiseksi.
- LFO:lle ja varsinaiselle oskillaattorille oma kantaluokka?

