Tehtävää aika- ja riippuvuusjärjestyksessä:

1. Luokka MainOscillator: äänen generointi (mahdollisesti LFO:lla moduloiden),
   verhokäyrä.
   
   Juuri seuraavaksi metodit:
   * synthesizeFromWavetable()
   * synthesizeSawtooth()
   * synthesizePulseWave()
   
   Kun LFO moduloi, niin Synthesizer kuitenkin aina kutsuu
   LowFrequencyOscillator.generateSound():ia.
   LFO piirtää sille annettuun aaltotaulukkoon signaalinsa, ja sitten
   aaltotaulukko annetaan edelleen osoitinparametrina
   MainOscillator.generateSound():ille.
   
   Siis: jokaiselle Oscillator- ja Lfo-oliolle ei erillistä
   äänipuskuria! Kolme äänisynteesipuskuria Synthesizerissä riittää:
   1. LFO:n ääni. Jos LFO:n taajuus on kiinteä, niin LFO:n ääni on kaikille
      MainOscillatoreille sama. Silloin LFO tarvitsee laskea vain kerran.
   2. MainOscillatorin ääni.
   3. Miksaus. Jokainen soiva MainOscillator generoidaan vuorollaan ja
      summataan miksauspuskuriin.   

   Kun LFO:n taajuus riippuu pääoskillaattorin taajuudesta, niin
   pääoskillaattorin pärähtäessä soimaan se asettaa LFO:n taajuuden.
   (Pääoskillaattorissa on viittaus sille varattuun LFO:hon.)

   * äänengeneroimismetodi
     * ääni generoidaan parametrina annettuun float-taulukkoon
     * lfo (itsenäinen)
     * moduloitu (annetaan parametrina moduloiva float-taulukko,
       jossa samplet)

2. Synthesizer-luokan alkua?
   C-version synth.c:n handle_parameter_change():ssa voisi yhden jättimäisen
   switch-lauseen sijasta tehdä haarukointeja SynthGui::buttonSelectin tapaan.

   Huom! Tallenna vapaat oskillaattorit jonona. Käytännön toteutus voi
   olla taulukko tai STL:n jono. On tehottomampaa käydä läpi kaikki
   oskillaattorit etsien ensimmäistä vapaata aina, kun tulee uusi nuotti.
   (Tämän takia synth.c:n muuttujaa osc_mute ei enää tarvita.)
   
   Huom! Tehokasta note offia varten pitää tehdä taulukot
   MainOscillator * GuiNotes[128]; ja
   MainOscillator * MidiNotes[128];
   Indeksinä on suoraan nuotin koskettimen numero (MIDI-numeroinnilla).
   Kun tulee note off, niin note offin lähteestä (Gui, MIDI) riippuen
   tsekataan jommastakummasta taulukosta oikea MainOscillator.
   Kun tulee all notes off, niin on ihan riittävän nopeaa käydä 128
   nuotin taulukko läpi (Tällaista erikoistapausta varten ei yksinään kannata
   tehdä listaa kummankin nuottilähteen soivista oskillaattoreista.)

7. luokka JackInterface
   * katso callbackien toteutuksesta mallia SynthGui-luokasta
   * paitsi että tässä toteutus suoraan staattiseen
     callbackiin nopeuden vuoksi (siis ei niin, että staattinen
     callbacki vielä kutsuu oliokohtaista kääremetodia)
   * analysoi vielä varmuuden vuoksi, että JACKin kutsuketju
     oikein (JACK tarvitsee dataa -> välitetään viimeksi
     generoitu -> annetaan syntetisaattorisäikeelle signaali,
     että voi lähteä generoimaan seuraavaa puskurillista)
   
8. luokka Filter
   
9. Optimointia: kannattaako oskillaattorin äänisynteesi laittaa inlineksi?
   Tietenkin se kiehtoisi, mutta ei taida onnistua, koska metodeissa on
   paikallisia muuttujia. Muutenkaan varsinaisen oskillaattorin äänisynteesi
   ei ole pelkästään aaltotaulukosta lukujen napsimista ja arvojen summaamista
   miksauspuskuriin. Muista modulointi.
   



